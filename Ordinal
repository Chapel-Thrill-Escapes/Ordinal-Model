#Rishabh Singh
#Chapel Thrill Escapes
#Ordinal Logistic Regression Model for Customer CTE Data
#
rm(list =ls()) #Cleans our environment 
#
#Installs the necessary packages 
if (!require(VGAM)) {install.packages("VGAM"); library(VGAM)} #Can fit a diverse type of ordered-logit regression models depending on nature of dataset and mathematical relationship
#between response variable and covariates: with proportional odds, semi-proportional odds, non-proportional odds. 
#model. 
if (!require(gofcat)) {install.packages("gofcat"); library(gofcat)} #Allows for the use of the "LR.Test" function
#
customer_filtered1 <- read.csv("/Users/rishisingh/Chapel\ Thrill\ Escapes\ /customer_filtered1.csv") #Imports our "customer_filtered1"
#dataset
#
#Representations our input variables as a matrix and our output variable (or response variable) as an ordered variable for our data to
#properly be fit into the "vglm" function for creating our non-proportional odds model. 
output <- ordered(customer_filtered1$Participants) 
input <- as.matrix(customer_filtered1$Method, customer_filtered1$On.Campus.Student, customer_filtered1$Private.event) 
#
#Testing the Proportional Odds Assumption to test for the Applicability of our Model. 
ordinal_log_po <- vglm(output ~ input, family = cumulative(parallel = TRUE), data = customer_filtered1) #Ordered Logistic Regression Model WITH proportional odds (our NULL
#assumption))
LR.test(ordinal_log_po, call = TRUE) #Likelihood Ratio Test for the Proportional Odds Assumption. The Probability Value
#of the Proportional Odds Assumption holding true was 0.0004508 < 0.001, indicating that a non-proportional odds model is applicable here. 
#
#
#Formulating our Training Set
set.seed(345) #Setting a seed allows for reproducibility of the sampled values
row_assignments <- sample(2, nrow(customer_filtered1), replace = TRUE, prob = c(0.7, 0.3)) #Randomly assigns 70% of our data to our training set
#and 30% to our test set. 
training_set <- customer_filtered1[row_assignments == 1, ] #Extracts our training set. 
#
#Training Labels and Input Matrix
training_response <- ordered(training_set$Participants) #Ordinal Response Variable
training_input <- as.matrix(training_set$Method, training_set$On.Campus.Student, training_set$Private.event) #Input matrix 
#
#Non-Proportional Odds Model
model <- vglm(training_response ~ training_input, family = cumulative(parallel = FALSE), data = training_set)
summary(model) #Model summary. Be wary of the residual deviance. 
#
#Test Set 
test_set <- customer_filtered1[row_assignments == 2, ] #Extracts our Test Set
test_response <- ordered(test_set$Participants) #Test Response Variable
test_input <- as.matrix(test_set$Method, test_set$On.Campus.Student, test_set$Private.event) #Test Input Matrix
#
#
prob_predictions <- predict(model, newdata = test_set, type = "response")  #Probability Predictions for Our Test Set
head(prob_predictions) #Views a segment of our probability predictions: the first six rows. 
#
#Testing Model Accuracy
#
#Extracts the Most Probable Number of Participants for each row in our dataset (Predicted by Our Model)
participants_pred <- max.col(prob_predictions) 
prediction_accuracy <- sum(participants_pred == as.numeric(test_response)) / nrow(prob_predictions) #Testing for the Proportion of Participant 
#Frequencies Correctly Predicted by our Model. 
print(prediction_accuracy)  #36% accuracy of our model 